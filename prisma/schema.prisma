generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL_DEV")
}

enum Role {
  NOT_ASSIGNED
  STUDENT
  TEACHER
}

enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  APPLAUSE
  WOW
  INSIGHTFUL
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  bio            String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @default(now()) @map(name: "updated_at")
  role           Role      @default(NOT_ASSIGNED)
  universitySlug String?

  accounts Account[]
  sessions Session[]
  teacher  Teacher?
  student  Student?

  comments  Comment[]
  reactions Reaction[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  passCode        String?
  verificationUrl String?

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Teacher {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  posts      Post[]
  classrooms Classroom[]

  @@map(name: "teachers")
}

model Student {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  files         File[]
  classrooms    Classroom[]
  conversations Conversation[]
  Message       Message[]

  @@map(name: "students")
}

model Classroom {
  id         String    @id @default(cuid())
  name       String
  bio        String?
  teacherId  String
  teacher    Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  isArchived Boolean   @default(false)
  posts      Post[]
  students   Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "classrooms")
}

model Post {
  id   String @id @default(cuid())
  name String
  text String

  teacherId String  
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  classroomId String?
  classroom   Classroom? @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  comments  Comment[]
  reactions Reaction[]
  file      File[]

  crcreatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map(name: "posts")
}

model File {
  id     String  @id @default(cuid())
  postId String? 
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  studentId String?  
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  conversation Conversation[]

  name String
  type String
  size Int
  url  String

  @@map(name: "files")
}

model Comment {
  id   String @id @default(cuid())
  text String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Comment?  @relation("Thread", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("Thread")

  reactions Reaction[]

  @@map(name: "comments")
}

model Reaction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  reactionCount Int
  reactionType  ReactionType

  @@map(name: "reactions")
}

model Conversation {
  id        String    @id @default(cuid())
  studentId String    
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  fileId    String
  file      File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map(name: "conversations")
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  studentId      String?
  student        Student?      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?
  createdAt      DateTime      @default(now())
}
